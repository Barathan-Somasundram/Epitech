//
// GUI_OpenGL.hpp for  in /home/somasu_b/rendu/cpp_nibbler/sources
// 
// Made by SOMASUNDRAM Barathan
// Login   <somasu_b@epitech.net>
// 
// Started on  Sun Apr  5 13:35:22 2015 SOMASUNDRAM Barathan
// Last update Sun Apr  5 21:22:31 2015 SOMASUNDRAM Barathan
//

#ifndef OPENGL_HPP_
# define OPENGL_HPP_

#include <iostream>
#include <vector>
#include <SDL/SDL.h>
#include <SDL/SDL_ttf.h>
#include <SDL/SDL_image.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include "IGui.hpp"

#define CUBE		0
#define FLOOR		1
#define WALL		2
#define SPHERE		3

#define IMG_BACKGROUND	"./image/OpenGL/background_opengl.bmp"
#define IMG_FLOOR	"./image/OpenGL/floor_opengl.bmp"
#define IMG_HEAD	"./image/OpenGL/head_opengl.bmp"
#define IMG_BODY	"./image/OpenGL/body_opengl.bmp"
#define IMG_WALL	"./image/OpenGL/wall_opengl.bmp"

class			OpenglNibbler : public IGui
{
private:
  int			_height;
  int			_width;
  SDL_Event		_event;
  SDL_Surface		*_screen;

  int			_firstMod;
  double       		_posX;
  double		_posY;
  double		_posZ;
  double       		_oriX;
  double		_oriY;
  double		_oriZ;
  double       		_vecX;
  double		_vecY;
  double		_vecZ;
  double       		_angX;
  double		_angY;
  double		_angZ;

  unsigned int		_wallList;
  unsigned int		_background;
  unsigned int		_cube;
  unsigned int		_sphere;
  unsigned int		_texture[6];

public:
  OpenglNibbler();
  ~OpenglNibbler();

  int			initialize(int height, int width, std::vector<int> snake, char* map);
  int			getEvent(void);
  int			refresh(std::vector<int> snake, char* map);
  void			destroy(void);

  private:
  void			loadTexture(void);
  unsigned int		setTexture(SDL_Surface*);
  void			createBackground(void);
  void			createSphere(void);
  void			createCube(void);
  void			drawing(int, int, int, std::vector<int>, char*);
  void			initCamera(void);
  void			setCamera(void);
  void			createList(std::vector<int>, char*);
};

#endif /* !OPENGL_HPP_ */
